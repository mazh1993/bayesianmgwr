library(INLA)
inla.rgeneric.beta.model <-
      function(cmd = c("graph", "Q", "mu", "initial", "log.norm.const", "log.prior", "quit"),
               theta = NULL) {
        envir = parent.env(environment())
        
        interpret.theta <- function() {
          return(list(prec = exp(theta[1L]),
                      rho = 1/(1+exp(-theta[2L])),
                      mu0 = theta[3L]))
        }
        graph <- function() {
          return (inla.as.sparse(matrix(1, n, n)))
        }
        Q <- function() {
          require(Matrix)
          param <- interpret.theta()
          cov.mat <- 1/param$prec * exp(-D/param$rho)
          prec.mat <- solve(cov.mat)
          return(inla.as.sparse(prec.mat))
        }
        mu <- function() {
          return (rep(interpret.theta()$mu, n))
        }
        log.norm.const <- function() {
          return (numeric())
        }
        log.prior <- function() {
          param = interpret.theta()
          res <- dgamma(param$prec, 0.01, 0.01, log = T) + log(param$prec) +
            log(1) + log(param$rho) + log(1 - param$rho) +
            dnorm(param$mu0, 0, 1, log = T)
          return(res)
        }
        initial <- function() {
          return(c(0, 0, 0))
        }
        quit <- function() {
          return(invisible())
        }
        
        if (!length(theta) || is.null(theta)) theta = initial()
        
        val <- do.call(match.arg(cmd), args = list())
        return(val)
      }
    
    Dist0 <- as.matrix(dist(data.frame(data.inla$u, data.inla$v)))
    Dmax <- max(Dist0); Dmax
    Dist01 <- Dist0/Dmax
    D <- Dist01
    NN <- nrow(D)
    
    beta.model <- inla.rgeneric.define(inla.rgeneric.beta.model,
                                       D = D,
                                       n = NN)
    f.beta <- y ~ -1 + f(idx1, x1, model = beta.model, n = NN) + 
      f(idx2, x2, model = beta.model, n = NN) + f(idx3, x3, model = beta.model, n = NN) + 
      f(idx4, x4, model = beta.model, n = NN) + f(idx5, x5, model = beta.model, n = NN) 
    
    m.beta <- inla(f.beta,
                   safe = FALSE, 
                   data = data.frame(data.inla, idx1 = 1:NN, idx2 = 1:NN, idx3 = 1:NN
                                     , idx4 = 1:NN, idx5 = 1:NN),
                   family = "gaussian",
                   verbose = T)
